package com.hiveview;import com.hiveview.bean.Blue;import com.hiveview.bean.Person;import com.hiveview.config.MainConfig;import com.hiveview.config.MainConfig2;import org.junit.Test;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import org.springframework.core.env.ConfigurableEnvironment;import java.util.Map;/** * Created by Cherish_DHL on 2018/4/20. */public class IOCTest {    AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);    @SuppressWarnings("resource")    @Test    public void test01(){        AnnotationConfigApplicationContext applicationContext =                new AnnotationConfigApplicationContext(MainConfig.class);        String[] definitionNames = applicationContext.getBeanDefinitionNames();        for (String name : definitionNames) {            System.out.println(name);        }    }    @Test    public void test02(){        //验证ioc容器中默认是单例的//        System.out.println("ioc容器创建完成....");        Object bean = applicationContext.getBean("person");//通过id获取//        Object bean2 = applicationContext.getBean("person");//        System.out.println(bean == bean2);    }    @Test    public void test03(){        String[] namesForType = applicationContext.getBeanNamesForType(Person.class);        ConfigurableEnvironment environment = applicationContext.getEnvironment();        //动态获取环境变量的值；Windows 10        String property = environment.getProperty("os.name");        System.out.println(property);        for (String name : namesForType) {            System.out.println(name);        }        Map<String, Person> persons = applicationContext.getBeansOfType(Person.class);        System.out.println(persons);    }    /**     * 给容器中注册组件；     * 1）、包扫描+组件标注注解（@Controller/@Service/@Repository/@Component）[自己写的类]     * 2）、@Bean[导入的第三方包里面的组件]     * 3）、@Import[快速给容器中导入一个组件]     * 		1）、@Import(要导入到容器中的组件)；容器中就会自动注册这个组件，id默认是全类名     * 		2）、ImportSelector:返回需要导入的组件的全类名数组；     * 		3）、ImportBeanDefinitionRegistrar:手动注册bean到容器中     * 4）、使用Spring提供的 FactoryBean（工厂Bean）;     * 		1）、默认获取到的是工厂bean调用getObject创建的对象     * 		2）、要获取工厂Bean本身，我们需要给id前面加一个&     * 			&colorFactoryBean     */    @Test    public void testImport(){        printBeans(applicationContext);        Blue bean = applicationContext.getBean(Blue.class);        System.out.println(bean);        //工厂Bean获取的是调用getObject创建的对象（其实是Color类）        Object bean2 = applicationContext.getBean("colorFactoryBean");        Object bean3 = applicationContext.getBean("colorFactoryBean");        System.out.println("bean的类型："+bean2.getClass());//单例的        System.out.println(bean2 == bean3);        //想要获取colorFactoryBean 本身 需要加一个&  BeanFactory.java中定义了FACTORY_BEAN_PREFIX="&"        Object bean4 = applicationContext.getBean("&colorFactoryBean");        System.out.println(bean4.getClass());    }    //打印IOC中的bean    private void printBeans(AnnotationConfigApplicationContext applicationContext){        String[] definitionNames = applicationContext.getBeanDefinitionNames();        for (String name : definitionNames) {            System.out.println(name);        }    }}